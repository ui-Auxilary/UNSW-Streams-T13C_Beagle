-----auth.py-----

generate_user_handle:

generates a unique str of the user's first name and last name concatenated together in lowercase with a maximum of 20 characters.
If a handle is already taken, append the smallest number (starting from 0) to the end of the handle. The number does not contribute
to the 20 character limit.

Arguments:
    name_first (str)    - first name of user
    name_last (str)     - last name of user
    

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns user_handle (str)

auth_login_v1:

logs in user given a valid email and password

Arguments:
    email (str)       - email of user
    password (str)    - password of user
    

Exceptions:
    InputError  - Occurs when either the email or password is not the same as the stored data of a user
    AccessError - None

Return Value:
    Returns user_id (int)

auth_register_v1:

Registers user using an email, password, first name and last name. Adds the user's data into the database with a user handle and returns a user id

Arguments:
    email (str)        - email of user
    password (str)     - password of user
    name_first (str)   - first name of user
    name_last (str)    - last name of user

Exceptions:
    InputError  - Occurs when:
                    - An invalid email pattern is used
                    - Email is already used
                    - Password is too short
                    - First name is an invalid size
                    - Last name is an invalid size
    AccessError - None

Return Value:
    Returns new_user_id (int)

----- channel.py -----

channel_invite_v1:

A user invites another user and gives access to a channel and adds them to the channel

Arguments:
    auth_user_id (int)    - user id of the user that is inviting
    channel_id (int)      - id of the channel user has been invited to
    u_id (int)            - user id of the user being invited

Exceptions:
    InputError  - Occurs when:
                    - invited user does not exist
                    - channel does not exist
                    - the invited user is already a member
    AccessError - Occurs when:
                    - User does not have permission to invite another user

Return Value:
    Returns {} (dictionary)

-----------------------------------------------------------------------
channel_details_v1:

Generates all details of a selected channel such as channel name, the owners of the channel,
all members of the channel, and whether the channel is public or private.


Arguments:
    auth_user_id (int)    - user id of a member of the channel
    channel_id (int)      - the id of the selected channel    

Exceptions:
    InputError  - Occurs when:
                    - channel_id does not exist
    AccessError - Occurs when:
                    - User is not a channel member

Return Value:
    Returns return_dict (dictionary)

-----------------------------------------------------------------------
channel_messages_v1:

Retrieves data of 50 sent messages in chunks to be displayed on a page

Arguments:
    auth_user_id (int)    - user id of member of channel
    channel_id (int)      - id of the selected channel
    start (int)           - location of where messages start from to be viewed

Exceptions:
    InputError  - Occurs when:
                    - channel id does not exist
                    - start exceeds number of total messages
    AccessError - Occurs when:
                    - user is not a member of the channel

Return Value:
    Returns messages (str)
    Returns start (int)
    Returns end (int)

----------------------------------------------------------------------
channel_join_v1:

allows a user to join a channel and adds them to the channel

Arguments:
    auth_user_id (int)    - user id of the user
    channel_id (int)      - id of the selected channel

Exceptions:
    InputError  - Occurs when:
                    - channel does not exist
                    - user is already a member
    AccessError - Occurs when:
                    - User does not have permission to join a private channel

Return Value:
    Returns {} (dictionary)

----------------------------------------------------------------------
-----channels.py-----

channels_list_v1:

returns a list of all the channels with their channel id's and channel name that the user
is a member of

Arguments:
    auth_user_id (int)    - id of user
    
Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns channel_list (list)

-----------------------------------------------------------------------
channels_listall_v1:

Provides a list of all channels including private channels, and their associated details

Arguments:
    auth_user_id (int)    - id of user

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns all_channels (list)

-----------------------------------------------------------------------
channels_create_v1:

creates a new channel with a given name that is public or private. The user that
creates it automatically joins the channel

Arguments:
    auth_user_id (int)    - id of user that is creating the channel
    name (str)            - name of the new channel
    is_public (bool)      - the privacy status of the channel

Exceptions:
    InputError  - Occurs when:
                    - user id does not exist
                    - invalid channel name size
    AccessError - None

Return Value:
    Returns new_channel_id (int)

-----------------------------------------------------------------------
-----data_operations.py-----

add_user:

adds user to the database

Arguments:
    user_id (int)       - id of user being added
    name_first (str)    - first name of user
    name_last (str)     - last name of user
    email (str)         - email of user
    password (str)      - password of user
    user_handle (str)   - the generated handle of the user
    is_owner (bool)     - whether the user is an owner

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    None

------------------------------------------------------------------------
get_user:

gets the user data from the database

Arguments:
    user_id (int)    - id of user    

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['user_data'][user_id] (dictionary)

------------------------------------------------------------------------
get_user_handles:

gets the handles of all users from the database

Arguments:
    None

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['user_handles'] (list)

------------------------------------------------------------------------
get_user_emails:

gets the emails of all users from the database

Arguments:
    None

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['user_emails'] (list)

------------------------------------------------------------------------
get_user_ids:

gets the id's of all users from the database

Arguments:
    None

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['user_ids'] (list)

------------------------------------------------------------------------
add_member_to_channel:

adds a user to a channel as a member

Arguments:
    channel_id (int)    - id of channel that user is being added to
    user_id (int)       - id of user being added to channel
    ...

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    None

-----------------------------------------------------------------------
add_channel:

adds channel data to the database

Arguments:
    channel_id (int)    - id of channel being added to database
    channel_name (str)  - name of channel being added to database
    user_id (int)       - the user id of the owner of the channel
    is_public (bool)    - privacy status of the channel

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    None

-----------------------------------------------------------------------
get_channel:

gets the channel data from the database from a specific channel_id

Arguments:
    channel_id (int)    - id of channel that the data is being retrieved for
    

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['channel_data'][channel_id] (dictionary)

------------------------------------------------------------------------
get_channel_ids:

gets a list of all the channel ids in the database

Arguments:
    None

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['channel_ids'] (list)

------------------------------------------------------------------------
add_message:

adds a message to the database from a user

Arguments:
    user_id (int)       - id of user that created the message
    channel_id (int)    - id of channel that message was created
    message_id (int)    - id of message being added to the database
    content (str)       - What the message contains
    time_created (int)  - time when the message was created

Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    None

-----------------------------------------------------------------------
get_message_by_id:

gets a specific message from its id

Arguments:
    message_id (int)    - id of message being added to the database
    
Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['message_data'][message_id] (dictionary)

-----------------------------------------------------------------------
get_message_by_channel:

gets all the message ids from a specified channel id

Arguments:
    channel_id (int)    - id of channel that message was created
    
Exceptions:
    InputError  - None
    AccessError - None

Return Value:
    Returns data_source['channel_data'][channel_id]['message_ids'] (dictionary)